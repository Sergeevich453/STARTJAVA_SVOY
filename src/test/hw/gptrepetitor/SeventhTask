–û—Ç–≤–µ—Ç 1
–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:

1. –ö–ª–∞—Å—Å Arrays (–ª–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á):
java
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
import java.util.*;

public class Arrays {

    private Arrays() {
        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–≤–µ—Ä—Å–∞ –º–∞—Å—Å–∏–≤–∞
    public static int[] reverseArray(int[] array) {
        if (array == null) return null;
        for (int i = 0, j = array.length - 1; i < j; i++, j--) {
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
        return array;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞
    public static Long[] calculateFactorials(Integer... numbers) {
        if (numbers == null || numbers.length == 0) return null;
        List<Long> results = new ArrayList<>();
        for (Integer num : numbers) {
            if (num == null || num < 0) {
                results.add(null); // –§–∞–∫—Ç–æ—Ä–∏–∞–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
            } else {
                long factorial = 1;
                for (int i = 2; i <= num; i++) {
                    factorial *= i;
                }
                results.add(factorial);
            }
        }
        return results.toArray(new Long[0]);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
    public static int[] generateUniqueArray(int lower, int upper) {
        if (lower > upper) throw new IllegalArgumentException("–û—à–∏–±–∫–∞: –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ –ø—Ä–∞–≤–æ–π.");
        int range = upper - lower + 1;
        int size = (int) (range * 0.75);
        if (size <= 0) throw new IllegalArgumentException("–û—à–∏–±–∫–∞: –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.");

        Set<Integer> uniqueNumbers = new LinkedHashSet<>();
        Random random = new Random();
        while (uniqueNumbers.size() < size) {
            uniqueNumbers.add(random.nextInt(range) + lower);
        }
        return uniqueNumbers.stream().mapToInt(Integer::intValue).toArray();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤
    public static String generateTriangle(char start, char end, boolean ascending) {
        if (start > end) throw new IllegalArgumentException("–û—à–∏–±–∫–∞: –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ –ø—Ä–∞–≤–æ–π.");
        StringBuilder triangle = new StringBuilder();
        int count = 1;
        List<Character> characters = new ArrayList<>();
        for (char c = start; c <= end; c++) characters.add(c);
        if (!ascending) Collections.reverse(characters);
        for (Character c : characters) {
            triangle.append(" ".repeat(Math.max(0, end - start - count + 1)));
            triangle.append(String.valueOf(c).repeat(count)).append("\n");
            count += 2;
        }
        return triangle.toString();
    }
}
2. –ö–ª–∞—Å—Å Console (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å):
java
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
public class Console {

    private Console() {
        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–∏—à—É—â–µ–π –º–∞—à–∏–Ω–∫–∏
    public static void printTypewriterEffect(String text) throws InterruptedException {
        if (text == null || text.trim().isEmpty()) {
            System.out.println("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null.");
            return;
        }
        for (char c : text.toCharArray()) {
            System.out.print(c);
            Thread.sleep(50);
        }
        System.out.println();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–∞—Å—Å–∏–≤–∞
    public static void printArray(String message, int[] array) {
        System.out.print(message + " ");
        if (array == null) {
            System.out.println("null");
            return;
        }
        System.out.println(java.util.Arrays.toString(array));
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤
    public static void printFactorials(String message, Long[] factorials) {
        System.out.println(message);
        for (int i = 0; i < factorials.length; i++) {
            if (factorials[i] == null) {
                System.out.printf("–û—à–∏–±–∫–∞: —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª %d! –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω%n", i);
            } else {
                System.out.printf("%d! = %d%n", i, factorials[i]);
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    public static void printTriangle(String triangle) {
        System.out.println(triangle);
    }
}
3. –ö–ª–∞—Å—Å Main (–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã):
java
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
public class Main {

    public static void main(String[] args) throws InterruptedException {
        // –ü—Ä–∏–º–µ—Ä 1: –†–µ–≤–µ—Ä—Å –º–∞—Å—Å–∏–≤–∞
        int[] array = {6, 8, 9, 1};
        Console.printArray("–î–æ —Ä–µ–≤–µ—Ä—Å–∞:", array);
        array = Arrays.reverseArray(array);
        Console.printArray("–ü–æ—Å–ª–µ —Ä–µ–≤–µ—Ä—Å–∞:", array);

        // –ü—Ä–∏–º–µ—Ä 2: –§–∞–∫—Ç–æ—Ä–∏–∞–ª—ã
        Long[] factorials = Arrays.calculateFactorials(8, 0, 9, -3, 1, 7, 13, -22, 0);
        Console.printFactorials("–§–∞–∫—Ç–æ—Ä–∏–∞–ª—ã —á–∏—Å–µ–ª:", factorials);

        // –ü—Ä–∏–º–µ—Ä 3: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
        int[] uniqueArray = Arrays.generateUniqueArray(-30, -10);
        Console.printArray("–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤:", uniqueArray);

        // –ü—Ä–∏–º–µ—Ä 4: –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
        String triangle = Arrays.generateTriangle('A', 'J', true);
        Console.printTriangle(triangle);

        // –ü—Ä–∏–º–µ—Ä 5: –≠—Ñ—Ñ–µ–∫—Ç –ø–∏—à—É—â–µ–π –º–∞—à–∏–Ω–∫–∏
        Console.printTypewriterEffect("Java - —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.");
    }
}
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
–ö–ª–∞—Å—Å Arrays:

–°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á.
–ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ.
–ö–ª–∞—Å—Å Console:

–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ–Ω—Å–æ–ª—å.
–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∞–º–∏ –∏–∑ Arrays.
–ö–ª–∞—Å—Å Main:

–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É Arrays –∏ Console.
–°–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã:

–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤ Arrays –∏ Console, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —É—Ç–∏–ª–∏—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã.
–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–ª–∏ –∑–∞–¥–∞—á ‚Äî –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å! üòä

–û—Ç–≤–µ—Ç 2
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ —Å —É—Ç–∏–ª–∏—Ç–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –Ω–∏–∂–µ. –ú—ã —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–ª–∞—Å—Å–∞: Arrays, Console, –∏ Main.

1. –ö–ª–∞—Å—Å Arrays
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á. –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏.

java
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public final class Arrays {

    private Arrays() {
        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
    }

    public static char[][] generateTriangle(char start, char end, boolean ascending) {
        if (start > end) {
            throw new IllegalArgumentException("–û—à–∏–±–∫–∞: –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ (" + start + ") > –ø—Ä–∞–≤–æ–π (" + end + ")");
        }

        int size = end - start + 1;
        char[][] triangle = new char[size][];
        for (int i = 0; i < size; i++) {
            int level = ascending ? i + 1 : size - i;
            triangle[i] = new char[level];
            for (int j = 0; j < level; j++) {
                triangle[i][j] = (char) (ascending ? start + i : end - i);
            }
        }
        return triangle;
    }

    public static double[] randomArray(int count) {
        if (count <= 0) {
            throw new IllegalArgumentException("–û—à–∏–±–∫–∞: –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.");
        }

        Random random = new Random();
        double[] array = new double[count];
        for (int i = 0; i < count; i++) {
            array[i] = random.nextDouble();
        }
        return array;
    }

    public static List<Integer> uniqueNumbers(int start, int end, int lineSize) {
        if (start > end) {
            throw new IllegalArgumentException("–û—à–∏–±–∫–∞: –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ (" + start + ") > –ø—Ä–∞–≤–æ–π (" + end + ")");
        }
        if (lineSize <= 0) {
            throw new IllegalArgumentException("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 (" + lineSize + ")");
        }

        int range = end - start + 1;
        int length = (int) Math.round(0.75 * range);

        if (length <= 0) {
            throw new IllegalArgumentException("–û—à–∏–±–∫–∞: –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.");
        }

        List<Integer> uniqueNumbers = new ArrayList<>();
        Random random = new Random();
        while (uniqueNumbers.size() < length) {
            int number = start + random.nextInt(range);
            if (!uniqueNumbers.contains(number)) {
                uniqueNumbers.add(number);
            }
        }
        uniqueNumbers.sort(Integer::compareTo);
        return uniqueNumbers;
    }
}
2. –ö–ª–∞—Å—Å Console
–°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Å–æ–ª—å.

java
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
public final class Console {

    private Console() {
        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
    }

    public static void printArray(double[] array, int numbersPerLine) {
        int count = 0;
        for (double num : array) {
            System.out.printf("%.3f ", num);
            if (++count % numbersPerLine == 0) {
                System.out.println();
            }
        }
        System.out.println();
    }

    public static void printError(String message) {
        System.out.println(message);
    }

    public static void printTriangle(char[][] triangle) {
        for (char[] line : triangle) {
            int spaces = triangle.length - line.length;
            System.out.print(" ".repeat(spaces));
            for (char c : line) {
                System.out.print(c + " ");
            }
            System.out.println();
        }
    }

    public static void printUniqueNumbers(List<Integer> numbers, int lineSize) {
        int count = 0;
        for (int num : numbers) {
            System.out.printf("%d ", num);
            if (++count % lineSize == 0) {
                System.out.println();
            }
        }
        System.out.println();
    }
}
3. –ö–ª–∞—Å—Å Main
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –∑–∞–ø—É—Å–∫–∞ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–ª–∞—Å—Å–∞–º–∏.

java
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
import java.util.List;

public class Main {

    public static void main(String[] args) {
        try {
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
            char[][] triangle = Arrays.generateTriangle('A', 'J', true);
            Console.printTriangle(triangle);

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
            double[] randomArray = Arrays.randomArray(15);
            Console.printArray(randomArray, 8);

            // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
            List<Integer> uniqueNumbers = Arrays.uniqueNumbers(-30, -10, 5);
            Console.printUniqueNumbers(uniqueNumbers, 5);

        } catch (IllegalArgumentException e) {
            Console.printError(e.getMessage());
        }
    }
}
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞:
–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏:

Arrays: —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∑–∞–¥–∞—á.
Console: –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.
Main: —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á –∏ –≤—ã–∑–æ–≤–æ–º –º–µ—Ç–æ–¥–æ–≤.
–ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤:

–ú–µ—Ç–æ–¥—ã –Ω–∞–∑–≤–∞–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–ø–æ–ª–Ω—è–µ–º–æ–π –∑–∞–¥–∞—á–µ–π: generateTriangle, randomArray, uniqueNumbers, printTriangle.
–ü—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫:

–í–≤–µ–¥–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.
–£–ø—Ä–æ—â–µ–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è:

–ö–æ–¥ –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ–º –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ—Ç–∫–æ–º—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –∑–∞–¥–∞—á.
–ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞:
mathematica
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
         A
        B B
       C C C
      D D D D
     E E E E E
–°–ª—É—á–∞–π–Ω—ã–π –º–∞—Å—Å–∏–≤:
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
0.234 0.678 0.123 0.456 0.789 0.111 0.222 0.333 
0.444 0.555 0.666 0.777 0.888 0.999 0.101 
–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞:
diff
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
-30 -28 -27 -26 -25 
-24 -23 -22 -21 -20 
-19 -18 -17 -16 -15 